(()=>{"use strict";class e{constructor(e){this.length=e,this.numOfHits=0,this.isSunk=!1,this.positions=[]}setPositions(e){this.positions=e}hit(){this.numOfHits+=1,this.checkIsSunk()}checkIsSunk(){this.numOfHits>=this.length&&(this.isSunk=!0)}getIsSunk(){return this.isSunk}}class t{constructor(){this.size=10,this.board=this.createBoard(this.size),this.numOfShips=5,this.numOfSunken=0,this.ships=[]}createBoard(e){const t=[];for(let a=0;a<e;a++)t[a]=new Array(e).fill(null);return t}placeShip(e,t,a,r){const n=e.length,s=[];for(let e=0;e<n;e++)if("right"===r){if(null!==this.board[t][a+e])throw new Error(`Collision detected at (${t}, ${a+e}). Ship cannot be placed.`);s.push([t,a+e])}else if("down"===r){if(null!==this.board[t+e][a])throw new Error(`Collision detected at (${t+e}, ${a}). Ship cannot be placed.`);s.push([t+e,a])}for(let s=0;s<n;s++)"right"===r?this.board[t][a+s]=e:"down"===r&&(this.board[t+s][a]=e);e.setPositions(s),this.ships.push(e)}receiveAttack(t,a){const r=this.board[t][a];null===r?this.board[t][a]="R":r instanceof e&&(r.hit(),this.board[t][a]="H",r.getIsSunk()&&this.incrementSunken())}incrementSunken(){if(this.numOfSunken++,this.numOfSunken>=this.numOfShips)return"Game Over! All ships have been sunk."}isGameover(){return this.numOfSunken>=this.numOfShips}logBoard(){console.log("Gameboard:");for(let e of this.board)console.log(e.map((e=>null===e?".":"S")).join(" "))}logBoardTable(){console.table(this.board.map((t=>t.map((t=>"H"===t?"H":"R"===t?"R":t instanceof e?"S":".")))))}}class a{constructor(e){"computer"===e?this.initCompter():"human"===e&&this.initPlayer()}initPlayer(){this.gameboard=new t}initCompter(){this.gameboard=new t,[5,4,3,3,2].forEach((t=>{let a=!1;for(;!a;){const r=Math.floor(Math.random()*this.gameboard.size),n=Math.floor(Math.random()*this.gameboard.size),s=Math.random()<.5?"right":"down",i=new e(t);try{this.gameboard.placeShip(i,r,n,s),a=!0}catch(e){}}}))}}const r={renderHomeScreen(){const e=document.querySelector("body");e.innerHTML="";const t=document.createElement("header");t.innerText="Battleship Game",e.appendChild(t);const a=document.createElement("div");a.classList.add("game-container");const r=document.createElement("div");r.classList.add("player-container");const n=document.createElement("h2");n.innerText="Player 1";const s=document.createElement("div");s.id="player1-board",s.classList.add("gameboard"),r.appendChild(n),r.appendChild(s);const i=document.createElement("div");i.classList.add("player-container");const o=document.createElement("h2");o.innerText="Player 2";const h=document.createElement("div");h.id="player2-board",h.classList.add("gameboard"),i.appendChild(o),i.appendChild(h),a.appendChild(r),a.appendChild(i),e.appendChild(a)},updateBoardUI(t,a,r){const n=document.getElementById(`${a}-board`);n.innerHTML="",t.board.forEach(((t,a)=>{const s=document.createElement("div");s.classList.add("row"),t.forEach(((t,n)=>{const i=document.createElement("div");i.classList.add("cell"),i.dataset.x=a,i.dataset.y=n,"H"===t?i.classList.add("hit"):"R"===t?i.classList.add("revealed"):r&&t instanceof e?i.classList.add("ship"):i.classList.add("empty"),s.appendChild(i)})),n.appendChild(s)}))},bindBoardClickEvents(e,t){document.getElementById(`${e}-board`).addEventListener("click",(e=>{if(e.target.classList.contains("cell")){const a=e.target.dataset.x,r=e.target.dataset.y;t(a,r)}}))}};(new class{constructor(){this.humanPlayer=new a("human"),this.computerPlayer=new a("computer"),this.currentPlayer=this.humanPlayer}startGame(){r.renderHomeScreen(),this.humanPlayer.gameboard.placeShip(new e(5),2,2,"right"),this.humanPlayer.gameboard.placeShip(new e(4),5,4,"down"),this.humanPlayer.gameboard.placeShip(new e(3),8,7,"right"),this.humanPlayer.gameboard.placeShip(new e(3),0,0,"down"),this.humanPlayer.gameboard.placeShip(new e(2),6,6,"down"),this.updateUI(),r.bindBoardClickEvents("player2",((e,t)=>{this.humanTurn(e,t)}))}humanTurn(e,t){this.currentPlayer===this.humanPlayer&&(this.humanPlayer.gameboard.receiveAttack(e,t),this.updateUI(),this.humanPlayer.gameboard.isGameover()?alert("You win! All enemy ships have been sunk."):(this.currentPlayer=this.computerPlayer,setTimeout((()=>this.computerTurn()),1e3)))}computerTurn(){if(this.currentPlayer!==this.computerPlayer)return;let e,t;do{e=Math.floor(Math.random()*this.humanPlayer.gameboard.size),t=Math.floor(Math.random()*this.humanPlayer.gameboard.size)}while(null!==this.humanPlayer.gameboard.board[e][t]);this.computerPlayer.gameboard.receiveAttack(e,t),this.updateUI(),this.computerPlayer.gameboard.isGameover()?alert("Computer wins! All your ships have been sunk."):this.currentPlayer=this.humanPlayer}updateUI(){r.updateBoardUI(this.humanPlayer.gameboard,"player1",!0),r.updateBoardUI(this.computerPlayer.gameboard,"player2",!1)}}).startGame(),r.bindBoardClickEvents("player2",((e,t)=>{computer.gameboard.receiveAttack(e,t),r.updateBoardUI(computer.gameboard,"player2")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,