(()=>{"use strict";var n={208:(n,t,e)=>{e.d(t,{A:()=>s});var a=e(354),r=e.n(a),o=e(314),i=e.n(o)()(r());i.push([n.id,":root {\n    --static: rgba(225, 225, 225, 0.5);\n    --static2: #0f0f0f;\n    --static3: rgb(255, 255, 255);\n    --static4: rgba(225, 225, 225, 0.2);\n    --static5: rgb(24, 172, 122);\n    --static6: rgba(0, 0, 0, 0.05);\n    --static7: rgba(0, 0, 0, 0.1);\n    --static8: rgba(0, 0, 0, 0.05);\n    --static9: rgba(0, 0, 0, 0.3);\n    --static10: rgba(225, 225, 225);\n    --static11: rgba(0, 0, 0, 0.03);\n    --static12: rgba(255, 255, 255, 0.8);\n    --static13: rgb(235, 235, 235);\n    --static14: rgba(0, 0, 0, 0.2);\n    --static15: rgba(255, 255, 255, 0.5);\n}\n\nh2{\n    color: aquamarine;\n}\n\n.game-container {\n    display: flex;\n    justify-content: space-around;\n    padding: 20px;\n}\n\n.player-container {\n    text-align: center;\n}\n\n.gameboard {\n    display: grid;\n    grid-template-columns: repeat(10, 30px);\n    grid-gap: 2px;\n}\n\n.cell {\n    width: 30px;\n    height: 30px;\n    border: 1px solid #000;\n    cursor: pointer;\n}\n\n.cell.hit {\n    background-color: red;\n}\n\n.cell.revealed {\n    background-color: lightgray;\n}\n\n.cell.ship {\n    background-color: navy;\n}\n\n.cell.empty {\n    background-color: white;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,kCAAkC;IAClC,kBAAkB;IAClB,6BAA6B;IAC7B,mCAAmC;IACnC,4BAA4B;IAC5B,8BAA8B;IAC9B,6BAA6B;IAC7B,8BAA8B;IAC9B,6BAA6B;IAC7B,+BAA+B;IAC/B,+BAA+B;IAC/B,oCAAoC;IACpC,8BAA8B;IAC9B,8BAA8B;IAC9B,oCAAoC;AACxC;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,aAAa;AACjB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,uCAAuC;IACvC,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,uBAAuB;AAC3B",sourcesContent:[":root {\n    --static: rgba(225, 225, 225, 0.5);\n    --static2: #0f0f0f;\n    --static3: rgb(255, 255, 255);\n    --static4: rgba(225, 225, 225, 0.2);\n    --static5: rgb(24, 172, 122);\n    --static6: rgba(0, 0, 0, 0.05);\n    --static7: rgba(0, 0, 0, 0.1);\n    --static8: rgba(0, 0, 0, 0.05);\n    --static9: rgba(0, 0, 0, 0.3);\n    --static10: rgba(225, 225, 225);\n    --static11: rgba(0, 0, 0, 0.03);\n    --static12: rgba(255, 255, 255, 0.8);\n    --static13: rgb(235, 235, 235);\n    --static14: rgba(0, 0, 0, 0.2);\n    --static15: rgba(255, 255, 255, 0.5);\n}\n\nh2{\n    color: aquamarine;\n}\n\n.game-container {\n    display: flex;\n    justify-content: space-around;\n    padding: 20px;\n}\n\n.player-container {\n    text-align: center;\n}\n\n.gameboard {\n    display: grid;\n    grid-template-columns: repeat(10, 30px);\n    grid-gap: 2px;\n}\n\n.cell {\n    width: 30px;\n    height: 30px;\n    border: 1px solid #000;\n    cursor: pointer;\n}\n\n.cell.hit {\n    background-color: red;\n}\n\n.cell.revealed {\n    background-color: lightgray;\n}\n\n.cell.ship {\n    background-color: navy;\n}\n\n.cell.empty {\n    background-color: white;\n}\n"],sourceRoot:""}]);const s=i},314:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",a=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),a&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),a&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,a,r,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(a)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);a&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),t.push(l))}},t}},354:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),o="/*# ".concat(r," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},72:n=>{var t=[];function e(n){for(var e=-1,a=0;a<t.length;a++)if(t[a].identifier===n){e=a;break}return e}function a(n,a){for(var o={},i=[],s=0;s<n.length;s++){var c=n[s],d=a.base?c[0]+a.base:c[0],l=o[d]||0,u="".concat(d," ").concat(l);o[d]=l+1;var p=e(u),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var h=r(A,a);a.byIndex=s,t.splice(s,0,{identifier:u,updater:h,references:1})}i.push(u)}return i}function r(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,r){var o=a(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var s=e(o[i]);t[s].references--}for(var c=a(n,r),d=0;d<o.length;d++){var l=e(o[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}o=c}}},659:n=>{var t={};n.exports=function(n,e){var a=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}},540:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},56:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var a="";e.supports&&(a+="@supports (".concat(e.supports,") {")),e.media&&(a+="@media ".concat(e.media," {"));var r=void 0!==e.layer;r&&(a+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),a+=e.css,r&&(a+="}"),e.media&&(a+="}"),e.supports&&(a+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(a,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},113:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(a){var r=t[a];if(void 0!==r)return r.exports;var o=t[a]={id:a,exports:{}};return n[a](o,o.exports,e),o.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var a in t)e.o(t,a)&&!e.o(n,a)&&Object.defineProperty(n,a,{enumerable:!0,get:t[a]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nc=void 0;class a{constructor(n){this.length=n,this.numOfHits=0,this.isSunk=!1,this.positions=[]}setPositions(n){this.positions=n}hit(){this.numOfHits+=1,this.checkIsSunk()}checkIsSunk(){this.numOfHits>=this.length&&(this.isSunk=!0)}getIsSunk(){return this.isSunk}}const r={renderHomeScreen(){const n=document.querySelector("body");n.innerHTML="";const t=document.createElement("header");t.innerText="Battleship Game",n.appendChild(t);const e=document.createElement("div");e.classList.add("game-container");const a=document.createElement("div");a.classList.add("player-container");const r=document.createElement("h2");r.innerText="Player 1";const o=document.createElement("div");o.id="player1-board",o.classList.add("gameboard"),a.appendChild(r),a.appendChild(o);const i=document.createElement("div");i.classList.add("player-container");const s=document.createElement("h2");s.innerText="Player 2";const c=document.createElement("div");c.id="player2-board",c.classList.add("gameboard"),i.appendChild(s),i.appendChild(c),e.appendChild(a),e.appendChild(i),n.appendChild(e)},updateBoardUI(n,t){const e=document.getElementById(`${t}-board`);e.innerHTML="",n.board.forEach(((n,t)=>{const r=document.createElement("div");r.classList.add("row"),n.forEach(((n,e)=>{const o=document.createElement("div");o.classList.add("cell"),o.dataset.x=t,o.dataset.y=e,"H"===n?o.classList.add("hit"):"R"===n?o.classList.add("revealed"):n instanceof a?o.classList.add("ship"):o.classList.add("empty"),r.appendChild(o)})),e.appendChild(r)}))},bindBoardClickEvents(n,t){document.getElementById(`${n}-board`).addEventListener("click",(n=>{if(n.target.classList.contains("cell")){const e=n.target.dataset.x,a=n.target.dataset.y;t(e,a)}}))}};class o{constructor(){this.size=10,this.board=this.createBoard(this.size),this.numOfShips=5,this.numOfSunken=0,this.ships=[]}createBoard(n){const t=[];for(let e=0;e<n;e++)t[e]=new Array(n).fill(null);return t}placeShip(n,t,e,a){const r=n.length,o=[];for(let n=0;n<r;n++)if("right"===a){if(null!==this.board[t][e+n])throw new Error(`Collision detected at (${t}, ${e+n}). Ship cannot be placed.`);o.push([t,e+n])}else if("down"===a){if(null!==this.board[t+n][e])throw new Error(`Collision detected at (${t+n}, ${e}). Ship cannot be placed.`);o.push([t+n,e])}for(let o=0;o<r;o++)"right"===a?this.board[t][e+o]=n:"down"===a&&(this.board[t+o][e]=n);n.setPositions(o),this.ships.push(n)}receiveAttack(n,t){const e=this.board[n][t];null===e?this.board[n][t]="R":e instanceof a&&(e.hit(),this.board[n][t]="H",e.getIsSunk()&&this.incrementSunken())}incrementSunken(){if(this.numOfSunken++,this.numOfSunken>=this.numOfShips)return"Game Over! All ships have been sunk."}isGameover(){return this.numOfSunken>=this.numOfShips}logBoard(){console.log("Gameboard:");for(let n of this.board)console.log(n.map((n=>null===n?".":"S")).join(" "))}logBoardTable(){console.table(this.board.map((n=>n.map((n=>"H"===n?"H":"R"===n?"R":n instanceof a?"S":".")))))}}class i{constructor(n){"computer"===n?this.initCompter():"human"===n&&this.initPlayer()}initPlayer(){this.gameboard=new o}initCompter(){this.gameboard=new o,[5,4,3,3,2].forEach((n=>{let t=!1;for(;!t;){const e=Math.floor(Math.random()*this.gameboard.size),r=Math.floor(Math.random()*this.gameboard.size),o=Math.random()<.5?"right":"down",i=new a(n);try{this.gameboard.placeShip(i,e,r,o),t=!0}catch(n){}}}))}}var s=e(72),c=e.n(s),d=e(825),l=e.n(d),u=e(659),p=e.n(u),A=e(56),h=e.n(A),m=e(540),f=e.n(m),g=e(113),b=e.n(g),C=e(208),v={};v.styleTagTransform=b(),v.setAttributes=h(),v.insert=p().bind(null,"head"),v.domAPI=l(),v.insertStyleElement=f(),c()(C.A,v),C.A&&C.A.locals&&C.A.locals,r.renderHomeScreen();const B=new i("human"),y=new i("computer");r.updateBoardUI(B.gameboard,"player1"),r.updateBoardUI(y.gameboard,"player2"),r.bindBoardClickEvents("player1",((n,t)=>{y.gameboard.receiveAttack(n,t),r.updateBoardUI(y.gameboard,"player2")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,