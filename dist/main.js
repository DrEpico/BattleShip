(()=>{"use strict";var n={208:(n,e,t)=>{t.d(e,{A:()=>s});var a=t(354),r=t.n(a),o=t(314),i=t.n(o)()(r());i.push([n.id,":root {\n    --static: rgba(225, 225, 225, 0.5);\n    --static2: #0f0f0f;\n    --static3: rgb(255, 255, 255);\n    --static4: rgba(225, 225, 225, 0.2);\n    --static5: rgb(24, 172, 122);\n    --static6: rgba(0, 0, 0, 0.05);\n    --static7: rgba(0, 0, 0, 0.1);\n    --static8: rgba(0, 0, 0, 0.05);\n    --static9: rgba(0, 0, 0, 0.3);\n    --static10: rgba(225, 225, 225);\n    --static11: rgba(0, 0, 0, 0.03);\n    --static12: rgba(255, 255, 255, 0.8);\n    --static13: rgb(235, 235, 235);\n    --static14: rgba(0, 0, 0, 0.2);\n    --static15: rgba(255, 255, 255, 0.5);\n}\n/* \nh2{\n    color: aquamarine;\n} */\n\n.game-container {\n    display: flex;\n    justify-content: space-around;\n    padding: 20px;\n}\n\n.player-container {\n    text-align: center;\n}\n\n.gameboard {\n    display: grid;\n    grid-template-columns: repeat(10, 30px);\n    grid-gap: 2px;\n}\n\n.cell {\n    width: 30px;\n    height: 30px;\n    border: 1px solid #000;\n    cursor: pointer;\n}\n\n.cell.hit {\n    background-color: red;\n}\n\n.cell.revealed {\n    background-color: lightgray;\n}\n\n.cell.ship {\n    background-color: navy;\n}\n\n.cell.empty {\n    background-color: white;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,kCAAkC;IAClC,kBAAkB;IAClB,6BAA6B;IAC7B,mCAAmC;IACnC,4BAA4B;IAC5B,8BAA8B;IAC9B,6BAA6B;IAC7B,8BAA8B;IAC9B,6BAA6B;IAC7B,+BAA+B;IAC/B,+BAA+B;IAC/B,oCAAoC;IACpC,8BAA8B;IAC9B,8BAA8B;IAC9B,oCAAoC;AACxC;AACA;;;GAGG;;AAEH;IACI,aAAa;IACb,6BAA6B;IAC7B,aAAa;AACjB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,uCAAuC;IACvC,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,uBAAuB;AAC3B",sourcesContent:[":root {\n    --static: rgba(225, 225, 225, 0.5);\n    --static2: #0f0f0f;\n    --static3: rgb(255, 255, 255);\n    --static4: rgba(225, 225, 225, 0.2);\n    --static5: rgb(24, 172, 122);\n    --static6: rgba(0, 0, 0, 0.05);\n    --static7: rgba(0, 0, 0, 0.1);\n    --static8: rgba(0, 0, 0, 0.05);\n    --static9: rgba(0, 0, 0, 0.3);\n    --static10: rgba(225, 225, 225);\n    --static11: rgba(0, 0, 0, 0.03);\n    --static12: rgba(255, 255, 255, 0.8);\n    --static13: rgb(235, 235, 235);\n    --static14: rgba(0, 0, 0, 0.2);\n    --static15: rgba(255, 255, 255, 0.5);\n}\n/* \nh2{\n    color: aquamarine;\n} */\n\n.game-container {\n    display: flex;\n    justify-content: space-around;\n    padding: 20px;\n}\n\n.player-container {\n    text-align: center;\n}\n\n.gameboard {\n    display: grid;\n    grid-template-columns: repeat(10, 30px);\n    grid-gap: 2px;\n}\n\n.cell {\n    width: 30px;\n    height: 30px;\n    border: 1px solid #000;\n    cursor: pointer;\n}\n\n.cell.hit {\n    background-color: red;\n}\n\n.cell.revealed {\n    background-color: lightgray;\n}\n\n.cell.ship {\n    background-color: navy;\n}\n\n.cell.empty {\n    background-color: white;\n}\n"],sourceRoot:""}]);const s=i},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",a=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),a&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),a&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,a,r,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(a)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);a&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),o="/*# ".concat(r," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,a=0;a<e.length;a++)if(e[a].identifier===n){t=a;break}return t}function a(n,a){for(var o={},i=[],s=0;s<n.length;s++){var c=n[s],d=a.base?c[0]+a.base:c[0],l=o[d]||0,p="".concat(d," ").concat(l);o[d]=l+1;var u=t(p),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(A);else{var h=r(A,a);a.byIndex=s,e.splice(s,0,{identifier:p,updater:h,references:1})}i.push(p)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var o=a(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var s=t(o[i]);e[s].references--}for(var c=a(n,r),d=0;d<o.length;d++){var l=t(o[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=c}}},659:n=>{var e={};n.exports=function(n,t){var a=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,r&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(a,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(a){var r=e[a];if(void 0!==r)return r.exports;var o=e[a]={id:a,exports:{}};return n[a](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var a in e)t.o(e,a)&&!t.o(n,a)&&Object.defineProperty(n,a,{enumerable:!0,get:e[a]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0;class a{constructor(n){this.length=n,this.numOfHits=0,this.isSunk=!1,this.positions=[]}setPositions(n){this.positions=n}hit(){this.numOfHits+=1,this.checkIsSunk()}checkIsSunk(){this.numOfHits>=this.length&&(this.isSunk=!0)}getIsSunk(){return this.isSunk}}const r={renderHomeScreen(){const n=document.querySelector("body");n.innerHTML="";const e=document.createElement("header");e.innerText="Battleship Game",n.appendChild(e);const t=document.createElement("div");t.classList.add("game-container");const a=document.createElement("div");a.classList.add("player-container");const r=document.createElement("h2");r.innerText="Player 1";const o=document.createElement("div");o.id="player1-board",o.classList.add("gameboard"),a.appendChild(r),a.appendChild(o);const i=document.createElement("div");i.classList.add("player-container");const s=document.createElement("h2");s.innerText="Player 2";const c=document.createElement("div");c.id="player2-board",c.classList.add("gameboard"),i.appendChild(s),i.appendChild(c),t.appendChild(a),t.appendChild(i),n.appendChild(t)},updateBoardUI(n,e,t){const r=document.getElementById(`${e}-board`);r.innerHTML="",n.board.forEach(((n,e)=>{const o=document.createElement("div");o.classList.add("row"),n.forEach(((n,r)=>{const i=document.createElement("div");i.classList.add("cell"),i.dataset.x=e,i.dataset.y=r,"H"===n?i.classList.add("hit"):"R"===n?i.classList.add("revealed"):t&&n instanceof a?i.classList.add("ship"):i.classList.add("empty"),o.appendChild(i)})),r.appendChild(o)}))},bindBoardClickEvents(n,e){document.getElementById(`${n}-board`).addEventListener("click",(n=>{if(n.target.classList.contains("cell")){const t=n.target.dataset.x,a=n.target.dataset.y;e(t,a)}}))}};class o{constructor(){this.size=10,this.board=this.createBoard(this.size),this.numOfShips=5,this.numOfSunken=0,this.ships=[]}createBoard(n){const e=[];for(let t=0;t<n;t++)e[t]=new Array(n).fill(null);return e}placeShip(n,e,t,a){const r=n.length,o=[];for(let n=0;n<r;n++)if("right"===a){if(null!==this.board[e][t+n])throw new Error(`Collision detected at (${e}, ${t+n}). Ship cannot be placed.`);o.push([e,t+n])}else if("down"===a){if(null!==this.board[e+n][t])throw new Error(`Collision detected at (${e+n}, ${t}). Ship cannot be placed.`);o.push([e+n,t])}for(let o=0;o<r;o++)"right"===a?this.board[e][t+o]=n:"down"===a&&(this.board[e+o][t]=n);n.setPositions(o),this.ships.push(n)}receiveAttack(n,e){const t=this.board[n][e];null===t?this.board[n][e]="R":t instanceof a&&(t.hit(),this.board[n][e]="H",t.getIsSunk()&&this.incrementSunken())}incrementSunken(){if(this.numOfSunken++,this.numOfSunken>=this.numOfShips)return"Game Over! All ships have been sunk."}isGameover(){return this.numOfSunken>=this.numOfShips}logBoard(){console.log("Gameboard:");for(let n of this.board)console.log(n.map((n=>null===n?".":"S")).join(" "))}logBoardTable(){console.table(this.board.map((n=>n.map((n=>"H"===n?"H":"R"===n?"R":n instanceof a?"S":".")))))}}class i{constructor(n){"computer"===n?this.initCompter():"human"===n&&this.initPlayer()}initPlayer(){this.gameboard=new o}initCompter(){this.gameboard=new o,[5,4,3,3,2].forEach((n=>{let e=!1;for(;!e;){const t=Math.floor(Math.random()*this.gameboard.size),r=Math.floor(Math.random()*this.gameboard.size),o=Math.random()<.5?"right":"down",i=new a(n);try{this.gameboard.placeShip(i,t,r,o),e=!0}catch(n){}}}))}}var s=t(72),c=t.n(s),d=t(825),l=t.n(d),p=t(659),u=t.n(p),A=t(56),h=t.n(A),m=t(540),g=t.n(m),f=t(113),b=t.n(f),C=t(208),v={};v.styleTagTransform=b(),v.setAttributes=h(),v.insert=u().bind(null,"head"),v.domAPI=l(),v.insertStyleElement=g(),c()(C.A,v),C.A&&C.A.locals&&C.A.locals,r.renderHomeScreen();const B=new i("human");B.gameboard.placeShip(new a(5),2,2,"right"),B.gameboard.placeShip(new a(4),5,4,"down"),B.gameboard.placeShip(new a(3),8,7,"right"),B.gameboard.placeShip(new a(3),0,0,"down"),B.gameboard.placeShip(new a(2),6,6,"down");const y=new i("computer");r.updateBoardUI(B.gameboard,"player1",!0),r.updateBoardUI(y.gameboard,"player2",!1),r.bindBoardClickEvents("player2",((n,e)=>{y.gameboard.receiveAttack(n,e),r.updateBoardUI(y.gameboard,"player2")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,