(()=>{"use strict";class t{constructor(t){this.length=t,this.numOfHits=0,this.isSunk=!1,this.positions=[]}setPositions(t){this.positions=t}hit(){this.numOfHits+=1,this.checkIsSunk()}checkIsSunk(){this.numOfHits>=this.length&&(this.isSunk=!0)}getIsSunk(){return this.isSunk}}class i{constructor(){this.size=10,this.board=this.createBoard(this.size),this.numOfShips=5,this.numOfSunken=0,this.ships=[]}createBoard(t){const i=[];for(let e=0;e<t;e++)i[e]=new Array(t).fill(null);return i}placeShip(t,i,e,n){const s=t.length,o=[];for(let t=0;t<s;t++)if("right"===n){if(null!==this.board[i][e+t])throw new Error(`Collision detected at (${i}, ${e+t}). Ship cannot be placed.`);o.push([i,e+t])}else if("down"===n){if(null!==this.board[i+t][e])throw new Error(`Collision detected at (${i+t}, ${e}). Ship cannot be placed.`);o.push([i+t,e])}for(let o=0;o<s;o++)"right"===n?this.board[i][e+o]=t:"down"===n&&(this.board[i+o][e]=t);t.setPositions(o),this.ships.push(t)}receiveAttack(i,e){const n=this.board[i][e];null===n?this.board[i][e]="R":n instanceof t&&(n.hit(),this.board[i][e]="H",n.getIsSunk()&&this.incrementSunken())}incrementSunken(){if(this.numOfSunken++,this.numOfSunken>=this.numOfShips)return"Game Over! All ships have been sunk."}isGameover(){return this.numOfSunken>=this.numOfShips}logBoard(){console.log("Gameboard:");for(let t of this.board)console.log(t.map((t=>null===t?".":"S")).join(" "))}logBoardTable(){console.table(this.board.map((i=>i.map((i=>"H"===i?"H":"R"===i?"R":i instanceof t?"S":".")))))}}class e{constructor(t){"computer"===t?this.initCompter():"human"===t&&this.initPlayer()}initPlayer(){this.gameboard=new i}initCompter(){this.gameboard=new i,[5,4,3,3,2].forEach((i=>{let e=!1;for(;!e;){const n=Math.floor(Math.random()*this.gameboard.size),s=Math.floor(Math.random()*this.gameboard.size),o=Math.random()<.5?"right":"down",a=new t(i);try{this.gameboard.placeShip(a,n,s,o),e=!0}catch(t){}}}))}}!function(){let i=new e("human");new e("computer"),i.gameboard.placeShip(new t(5),2,2,"right"),i.gameboard.placeShip(new t(4),5,4,"down"),i.gameboard.placeShip(new t(3),8,7,"right"),i.gameboard.placeShip(new t(3),0,0,"down"),i.gameboard.placeShip(new t(2),6,6,"down"),i.gameboard.logBoardTable()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,