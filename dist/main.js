(()=>{"use strict";var e={208:(e,t,n)=>{n.d(t,{A:()=>s});var a=n(354),r=n.n(a),o=n(314),i=n.n(o)()(r());i.push([e.id,":root {\n    --static: rgba(225, 225, 225, 0.5);\n    --static2: #0f0f0f;\n    --static3: rgb(255, 255, 255);\n    --static4: rgba(225, 225, 225, 0.2);\n    --static5: rgb(24, 172, 122);\n    --static6: rgba(0, 0, 0, 0.05);\n    --static7: rgba(0, 0, 0, 0.1);\n    --static8: rgba(0, 0, 0, 0.05);\n    --static9: rgba(0, 0, 0, 0.3);\n    --static10: rgba(225, 225, 225);\n    --static11: rgba(0, 0, 0, 0.03);\n    --static12: rgba(255, 255, 255, 0.8);\n    --static13: rgb(235, 235, 235);\n    --static14: rgba(0, 0, 0, 0.2);\n    --static15: rgba(255, 255, 255, 0.5);\n}\n\n.game-container {\n    display: flex;\n    justify-content: space-around;\n    padding: 20px;\n}\n\n.player-container {\n    text-align: center;\n}\n\n.gameboard {\n    display: grid;\n    grid-template-columns: repeat(10, 30px);\n    grid-gap: 2px;\n}\n\n.cell {\n    width: 30px;\n    height: 30px;\n    border: 1px solid #000;\n    cursor: pointer;\n}\n\n.cell.hit {\n    background-color: red;\n}\n\n.cell.revealed {\n    background-color: lightgray;\n}\n\n.cell.ship {\n    background-color: navy;\n}\n\n.cell.empty {\n    background-color: white;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,kCAAkC;IAClC,kBAAkB;IAClB,6BAA6B;IAC7B,mCAAmC;IACnC,4BAA4B;IAC5B,8BAA8B;IAC9B,6BAA6B;IAC7B,8BAA8B;IAC9B,6BAA6B;IAC7B,+BAA+B;IAC/B,+BAA+B;IAC/B,oCAAoC;IACpC,8BAA8B;IAC9B,8BAA8B;IAC9B,oCAAoC;AACxC;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,aAAa;AACjB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,uCAAuC;IACvC,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,uBAAuB;AAC3B",sourcesContent:[":root {\n    --static: rgba(225, 225, 225, 0.5);\n    --static2: #0f0f0f;\n    --static3: rgb(255, 255, 255);\n    --static4: rgba(225, 225, 225, 0.2);\n    --static5: rgb(24, 172, 122);\n    --static6: rgba(0, 0, 0, 0.05);\n    --static7: rgba(0, 0, 0, 0.1);\n    --static8: rgba(0, 0, 0, 0.05);\n    --static9: rgba(0, 0, 0, 0.3);\n    --static10: rgba(225, 225, 225);\n    --static11: rgba(0, 0, 0, 0.03);\n    --static12: rgba(255, 255, 255, 0.8);\n    --static13: rgb(235, 235, 235);\n    --static14: rgba(0, 0, 0, 0.2);\n    --static15: rgba(255, 255, 255, 0.5);\n}\n\n.game-container {\n    display: flex;\n    justify-content: space-around;\n    padding: 20px;\n}\n\n.player-container {\n    text-align: center;\n}\n\n.gameboard {\n    display: grid;\n    grid-template-columns: repeat(10, 30px);\n    grid-gap: 2px;\n}\n\n.cell {\n    width: 30px;\n    height: 30px;\n    border: 1px solid #000;\n    cursor: pointer;\n}\n\n.cell.hit {\n    background-color: red;\n}\n\n.cell.revealed {\n    background-color: lightgray;\n}\n\n.cell.ship {\n    background-color: navy;\n}\n\n.cell.empty {\n    background-color: white;\n}\n"],sourceRoot:""}]);const s=i},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,r,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(a)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);a&&i[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),o="/*# ".concat(r," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,a=0;a<t.length;a++)if(t[a].identifier===e){n=a;break}return n}function a(e,a){for(var o={},i=[],s=0;s<e.length;s++){var c=e[s],l=a.base?c[0]+a.base:c[0],d=o[l]||0,h="".concat(l," ").concat(d);o[l]=d+1;var u=n(h),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var m=r(p,a);a.byIndex=s,t.splice(s,0,{identifier:h,updater:m,references:1})}i.push(h)}return i}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var o=a(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=n(o[i]);t[s].references--}for(var c=a(e,r),l=0;l<o.length;l++){var d=n(o[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}o=c}}},659:e=>{var t={};e.exports=function(e,n){var a=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,r&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(a){var r=t[a];if(void 0!==r)return r.exports;var o=t[a]={id:a,exports:{}};return e[a](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;class a{constructor(e){this.length=e,this.numOfHits=0,this.isSunk=!1,this.positions=[]}setPositions(e){this.positions=e}hit(){this.numOfHits+=1,this.checkIsSunk()}checkIsSunk(){this.numOfHits>=this.length&&(this.isSunk=!0)}getIsSunk(){return this.isSunk}}class r{constructor(){this.size=10,this.board=this.createBoard(this.size),this.numOfShips=5,this.numOfSunken=0,this.ships=[]}createBoard(e){const t=[];for(let n=0;n<e;n++)t[n]=new Array(e).fill(null);return t}placeShip(e,t,n,a){const r=e.length,o=[];for(let e=0;e<r;e++)if("right"===a){if(null!==this.board[t][n+e])throw new Error(`Collision detected at (${t}, ${n+e}). Ship cannot be placed.`);o.push([t,n+e])}else if("down"===a){if(null!==this.board[t+e][n])throw new Error(`Collision detected at (${t+e}, ${n}). Ship cannot be placed.`);o.push([t+e,n])}for(let o=0;o<r;o++)"right"===a?this.board[t][n+o]=e:"down"===a&&(this.board[t+o][n]=e);e.setPositions(o),this.ships.push(e)}receiveAttack(e,t){const n=this.board[e][t];null===n?this.board[e][t]="R":n instanceof a&&(n.hit(),this.board[e][t]="H",n.getIsSunk()&&this.incrementSunken())}incrementSunken(){if(this.numOfSunken++,this.numOfSunken>=this.numOfShips)return"Game Over! All ships have been sunk."}isGameover(){return this.numOfSunken>=this.numOfShips}logBoard(){console.log("Gameboard:");for(let e of this.board)console.log(e.map((e=>null===e?".":"S")).join(" "))}logBoardTable(){console.table(this.board.map((e=>e.map((e=>"H"===e?"H":"R"===e?"R":e instanceof a?"S":".")))))}}class o{constructor(e){"computer"===e?this.initCompter():"human"===e&&this.initPlayer()}initPlayer(){this.gameboard=new r}initCompter(){this.gameboard=new r,[5,4,3,3,2].forEach((e=>{let t=!1;for(;!t;){const n=Math.floor(Math.random()*this.gameboard.size),r=Math.floor(Math.random()*this.gameboard.size),o=Math.random()<.5?"right":"down",i=new a(e);try{this.gameboard.placeShip(i,n,r,o),t=!0}catch(e){}}}))}}const i={renderHomeScreen(){const e=document.querySelector("body");e.innerHTML="";const t=document.createElement("header");t.innerText="Battleship Game",e.appendChild(t);const n=document.createElement("div");n.classList.add("game-container");const a=document.createElement("div");a.classList.add("player-container");const r=document.createElement("h2");r.innerText="Your board";const o=document.createElement("div");o.id="player1-board",o.classList.add("gameboard"),a.appendChild(r),a.appendChild(o);const i=document.createElement("div");i.classList.add("player-container");const s=document.createElement("h2");s.innerText="Opponent's board";const c=document.createElement("div");c.id="player2-board",c.classList.add("gameboard"),i.appendChild(s),i.appendChild(c),n.appendChild(a),n.appendChild(i),e.appendChild(n)},updateBoardUI(e,t,n){const r=document.getElementById(`${t}-board`);r.innerHTML="",e.board.forEach(((e,t)=>{const o=document.createElement("div");o.classList.add("row"),e.forEach(((e,r)=>{const i=document.createElement("div");i.classList.add("cell"),i.dataset.x=t,i.dataset.y=r,"H"===e?i.classList.add("hit"):"R"===e?i.classList.add("revealed"):n&&e instanceof a?i.classList.add("ship"):i.classList.add("empty"),o.appendChild(i)})),r.appendChild(o)}))},bindBoardClickEvents(e,t){document.getElementById(`${e}-board`).addEventListener("click",(e=>{if(e.target.classList.contains("cell")){const n=e.target.dataset.x,a=e.target.dataset.y;t(n,a)}}))}};var s=n(72),c=n.n(s),l=n(825),d=n.n(l),h=n(659),u=n.n(h),p=n(56),m=n.n(p),A=n(540),g=n.n(A),b=n(113),f=n.n(b),y=n(208),C={};C.styleTagTransform=f(),C.setAttributes=m(),C.insert=u().bind(null,"head"),C.domAPI=d(),C.insertStyleElement=g(),c()(y.A,C),y.A&&y.A.locals&&y.A.locals,(new class{constructor(){this.humanPlayer=new o("human"),this.computerPlayer=new o("computer"),this.currentPlayer=this.humanPlayer,this.shipsToPlace=[5,4,3,3,2],this.currentShipIndex=0}startGame(){i.renderHomeScreen(),this.promptShipPlacement()}promptShipPlacement(){const e=this.shipsToPlace[this.currentShipIndex];alert(`Place your ship of length ${e}. Click on the board to place it, and choose a direction.`),i.bindBoardClickEvents("player1",((t,n)=>{this.handleShipPlacement(t,n,e)}))}handleShipPlacement(e,t,n){const r=prompt("Enter the direction to place the ship (right/down):").toLowerCase();try{this.humanPlayer.gameboard.placeShip(new a(n),parseInt(e),parseInt(t),r),this.updateUI(),this.currentShipIndex++,this.currentShipIndex<this.shipsToPlace.length?this.promptShipPlacement():this.startCombatPhase()}catch(e){alert(e.message)}}startCombatPhase(){alert("All ships placed! The game begins now."),i.bindBoardClickEvents("player2",((e,t)=>{this.humanTurn(e,t)})),this.updateUI()}humanTurn(e,t){this.currentPlayer===this.humanPlayer&&(this.computerPlayer.gameboard.receiveAttack(e,t),this.updateUI(),this.computerPlayer.gameboard.isGameover()?alert("You win! All enemy ships have been sunk."):(this.currentPlayer=this.computerPlayer,setTimeout((()=>this.computerTurn()),1e3)))}computerTurn(){if(this.currentPlayer!==this.computerPlayer)return;let e,t;do{e=Math.floor(Math.random()*this.humanPlayer.gameboard.size),t=Math.floor(Math.random()*this.humanPlayer.gameboard.size)}while(["H","R"].includes(this.humanPlayer.gameboard.board[e][t]));this.humanPlayer.gameboard.receiveAttack(e,t),this.updateUI(),this.humanPlayer.gameboard.isGameover()?alert("Computer wins! All your ships have been sunk."):this.currentPlayer=this.humanPlayer}updateUI(){console.log("update UI"),i.updateBoardUI(this.humanPlayer.gameboard,"player1",!0),i.updateBoardUI(this.computerPlayer.gameboard,"player2",!1),this.humanPlayer.gameboard.logBoardTable()}}).startGame()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,